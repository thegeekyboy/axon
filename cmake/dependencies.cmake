##############################################################################
## Finding the libraries and packages										 #
##############################################################################

set(LIST_DEPS_RPM "libstdc++")

# pkgconfig
find_package(PkgConfig REQUIRED)

# libcrypto
pkg_check_modules(CRYPT libcrypto>=3.0.0)

if (CRYPT_FOUND)
	list(APPEND INCLUDE_DIRS ${CRYPT_INCLUDE_DIRS})
	list(APPEND LINK_LIBRARIES ${CRYPT_LINK_LIBRARIES})
	list(APPEND LDFLAGS ${CRYPT_LDFLAGS})
	list(APPEND LIST_MODULE_NAME ${CRYPT_MODULE_NAME})
	string(APPEND LIST_DEPS_RPM " openssl-libs")
else (NOT CRYPT_FOUND)
	message(STATUS "libcrypto: trying alternate search method")
	find_package(Crypt REQUIRED)
	if (CRYPT_FOUND)
		list(APPEND INCLUDE_DIRS ${CRYPT_INCLUDE_DIRS})
		list(APPEND LINK_LIBRARIES ${CRYPT_LIBRARIES})
	else (NOT CRYPT_FOUND)
		message(FATAL_ERROR "libcrypto: could not detect/find any installed location, cannot continue")
	endif ()
endif ()

# file-magic
pkg_check_modules(LIBMAGIC libmagic)

if (LIBMAGIC_FOUND)
	list(APPEND INCLUDE_DIRS ${LIBMAGIC_INCLUDE_DIRS})
	list(APPEND LINK_LIBRARIES ${LIBMAGIC_LINK_LIBRARIES})
	list(APPEND LDFLAGS ${LIBMAGIC_LDFLAGS})
	list(APPEND LIST_MODULE_NAME ${LIBMAGIC_MODULE_NAME})
	string(APPEND LIST_DEPS_RPM " file-libs")
else (NOT LIBMAGIC_FOUND)
	message(STATUS "libmagic: trying alternate search method")
	find_package(LibMagic REQUIRED)
	if (LIBMAGIC_FOUND)
		list(APPEND INCLUDE_DIRS ${LIBMAGIC_INCLUDE_DIRS})
		list(APPEND LINK_LIBRARIES ${LIBMAGIC_LIBRARIES})
	else (NOT LIBMAGIC_FOUND)
		message(FATAL_ERROR "libmagic: could not detect/find any installed location, cannot continue")
	endif ()

endif ()

# OpenSSL
pkg_check_modules(OPENSSL REQUIRED openssl>=3.0.0)

if (OPENSSL_FOUND)
	list(APPEND INCLUDE_DIRS ${OPENSSL_INCLUDEDIR})
	list(APPEND LDFLAGS ${OPENSSL_LDFLAGS})
	list(APPEND LIST_MODULE_NAME ${OPENSSL_MODULE_NAME})
	string(APPEND LIST_DEPS_RPM " openssl")
endif ()


# Kerberos 5
pkg_check_modules(KRB5 krb5)

if (KRB5_FOUND)
	list(APPEND INCLUDE_DIRS ${KRB5_INCLUDEDIR})
	list(APPEND LINK_LIBRARIES ${KRB5_LINK_LIBRARIES})
	list(APPEND LDFLAGS ${KRB5_LDFLAGS})
	list(APPEND LIST_MODULE_NAME ${KRB5_MODULE_NAME})
	string(APPEND LIST_DEPS_RPM " krb5-libs")
else (NOT KRB5_FOUND)
	message(STATUS "krb5: trying alternate search method")
	find_package(KRB5 REQUIRED gssapi)
	if (KRB5_FOUND)
		list(APPEND INCLUDE_DIRS ${KRB5_INCLUDE_DIRS})
		list(APPEND LINK_LIBRARIES ${KRB5_LIBRARIES})
	else (NOT KRB5_FOUND)
		message(FATAL_ERROR "krb5: could not detect/find the required libraries, cannot continue!")
	endif()
endif()

# GSSAPI
pkg_check_modules(GSSAPI krb5-gssapi>=1.20.0)

if (GSSAPI_FOUND)
	list(APPEND INCLUDE_DIRS ${GSSAPI_INCLUDEDIR})
	list(APPEND LINK_LIBRARIES ${GSSAPI_LINK_LIBRARIES})
	list(APPEND LDFLAGS ${GSSAPI_LDFLAGS})
	list(APPEND LIST_MODULE_NAME ${GSSAPI_MODULE_NAME})
	string(APPEND LIST_DEPS_RPM " krb5-libs")
else (NOT GSSAPI_FOUND)
	message(STATUS "krb5-gssapi: trying alternate search method")
	find_package (GSSAPI REQUIRED)
	if (GSSAPI_FOUND)
		list(APPEND INCLUDE_DIRS ${GSSAPI_INCLUDE_DIR})
		list(APPEND LINK_LIBRARIES ${GSSAPI_LIBRARIES})
	else (NOT GSSAPI_FOUND)
		message(FATAL_ERROR "krb5-gssapi: could not detect/find any installed location, cannot continue!")
	endif ()
endif ()

# libcurl
pkg_check_modules(CURL libcurl>=7.75.0)

if (CURL_FOUND)
	list(APPEND INCLUDE_DIRS ${CURL_INCLUDEDIR})
	list(APPEND LINK_LIBRARIES ${CURL_LINK_LIBRARIES})
	list(APPEND LDFLAGS ${CURL_LDFLAGS})
	list(APPEND LIST_MODULE_NAME ${CURL_MODULE_NAME})
	string(APPEND LIST_DEPS_RPM " libcurl")
else (NOT CURL_FOUND)
	message(STATUS "libcurl: trying alternate search method")
	find_package (CURL REQUIRED)
	if (CURL_FOUND)
		list(APPEND INCLUDE_DIRS ${CURL_INCLUDE_DIRS})
		list(APPEND LINK_LIBRARIES ${CURL_LIBRARIES})
	else (NOT CURL_FOUND)
		message(FATAL_ERROR "libcurl: could not detect/find any installed location, cannot continue!")
	endif ()
endif ()

# BZip2
pkg_check_modules(BZIP2 bzip2>=1.0.6)

if (BZIP2_FOUND)
	list(APPEND INCLUDE_DIRS ${BZIP2_INCLUDEDIR})
	list(APPEND LINK_LIBRARIES ${BZIP2_LINK_LIBRARIES})
	list(APPEND LDFLAGS ${BZIP2_LDFLAGS})
	list(APPEND LIST_MODULE_NAME ${BZIP2_MODULE_NAME})
	string(APPEND LIST_DEPS_RPM " bzip2-libs")
else (NOT BZIP2_FOUND)
	message(STATUS "bzip2: trying alternate search method")
	find_package (BZip2 REQUIRED)
	if (BZIP2_FOUND)
		list(APPEND INCLUDE_DIRS ${BZIP2_INCLUDE_DIRS})
		list(APPEND LINK_LIBRARIES ${BZIP2_LIBRARIES})
	else (NOT BZIP2_FOUND)
		message(FATAL_ERROR "bzip2: could not detect/find any installed location, cannot continue!")
	endif ()
endif ()

# libzstd
pkg_check_modules(ZSTD libzstd>=1.5.1)

if (ZSTD_FOUND)
	list(APPEND INCLUDE_DIRS ${ZSTD_INCLUDEDIR})
	list(APPEND LINK_LIBRARIES ${ZSTD_LINK_LIBRARIES})
	list(APPEND LDFLAGS ${ZSTD_LDFLAGS})
	list(APPEND LIST_MODULE_NAME ${ZSTD_MODULE_NAME})
	string(APPEND LIST_DEPS_RPM " libzstd")
else (NOT ZSTD_FOUND)
	message(STATUS "libzstd: trying alternate search method")
	find_package (ZSTD REQUIRED)
	if (ZSTD_FOUND)
		list(APPEND INCLUDE_DIRS ${ZSTD_INCLUDE_DIRS})
		list(APPEND LINK_LIBRARIES ${ZSTD_LIBRARIES})
	else (NOT ZSTD_FOUND)
		message(FATAL_ERROR "libzstd: could not detect/find any installed location, cannot continue!")
	endif ()
endif ()

# SQLITE3
pkg_check_modules(SQLITE3 sqlite3>=3.34.0)

if (SQLITE3_FOUND)
	list(APPEND INCLUDE_DIRS ${SQLITE3_INCLUDEDIR})
	list(APPEND LINK_LIBRARIES ${SQLITE3_LINK_LIBRARIES})
	list(APPEND LDFLAGS ${SQLITE3_LDFLAGS})
	list(APPEND LIST_MODULE_NAME ${SQLITE3_MODULE_NAME})
	string(APPEND LIST_DEPS_RPM " sqlite-libs")
else (NOT SQLITE3_FOUND)
	message(STATUS "sqlite3: trying alternate search method")
	find_package(SQLITE3 REQUIRED)
	if (SQLITE3_FOUND)
		list(APPEND INCLUDE_DIRS ${SQLITE3_INCLUDE_DIRS})
		list(APPEND LINK_LIBRARIES ${SQLITE3_LIBRARIES})
	else (NOT SQLITE3_FOUND)
		message(FATAL_ERROR "sqlite: could not detect/find the required libraries, cannot continue!")
	endif ()
endif ()

# libssh2
pkg_check_modules(SSH2 libssh2>=1.10.0)

if (SSH2_FOUND)
	list(APPEND INCLUDE_DIRS ${SSH2_INCLUDEDIR})
	list(APPEND LINK_LIBRARIES ${SSH2_LINK_LIBRARIES})
	list(APPEND LDFLAGS ${SSH2_LDFLAGS})
	list(APPEND LIST_MODULE_NAME ${SSH2_MODULE_NAME})
	string(APPEND LIST_DEPS_RPM " libssh2")
else (NOT LIBSSH2_FOUND)
	message(STATUS "libssh2: trying alternate search method")
	find_package(SSH2 REQUIRED)
	if (SSH2_FOUND)
		list(APPEND INCLUDE_DIRS ${SSH2_INCLUDE_DIRS})
		list(APPEND LINK_LIBRARIES ${SSH2_LIBRARIES})
	else (NOT SSH2_FOUND)
		message(FATAL_ERROR "libssh2: could not detect/find the required libraries, cannot continue!")
	endif ()
endif ()

# libconfig
pkg_check_modules(CONFIG libconfig>=1.7.2)

if (CONFIG_FOUND)
	list(APPEND INCLUDE_DIRS ${CONFIG_INCLUDEDIR})
	list(APPEND LINK_LIBRARIES ${CONFIG_LINK_LIBRARIES})
	list(APPEND LDFLAGS ${CONFIG_LDFLAGS})
	list(APPEND LIST_MODULE_NAME ${CONFIG_MODULE_NAME})
	string(APPEND LIST_DEPS_RPM " libconfig")
else (NOT CONFIG_FOUND)
	message(STATUS "linconfig: trying alternate search method")
	find_package(CONFIG REQUIRED)
	if (CONFIG_FOUND)
		list(APPEND INCLUDE_DIRS ${CONFIG_INCLUDE_DIRS})
		list(APPEND LINK_LIBRARIES ${CONFIG_LIBRARIES})
	else (NOT CONFIG_FOUND)
		message(FATAL_ERROR "libconfig: could not detect/find the required libraries, cannot continue!")
	endif ()
endif ()

# blkid
pkg_check_modules(BLKID blkid>=2.37.0)

if (BLKID_FOUND)
	list(APPEND INCLUDE_DIRS ${BLKID_INCLUDEDIR})
	list(APPEND LINK_LIBRARIES ${BLKID_LINK_LIBRARIES})
	list(APPEND LDFLAGS ${BLKID_LDFLAGS})
	list(APPEND LIST_MODULE_NAME ${BLKID_MODULE_NAME})
	string(APPEND LIST_DEPS_RPM " libblkid")
else (NOT BLKID_FOUND)
	message(STATUS "blkid: trying alternate search method")
	find_package(BLKID REQUIRED)
	if (BLKID_FOUND)
		list(APPEND INCLUDE_DIRS ${BLKID_INCLUDE_DIRS})
		list(APPEND LINK_LIBRARIES ${BLKID_LIBRARIES})
	else (NOT BLKID_FOUND)
		message(FATAL_ERROR "blkid: could not detect/find the required libraries, cannot continue!")
	endif ()
endif ()

# libsmb2
pkg_check_modules(SMB2 libsmb2>=4.0.0)

if (SMB2_FOUND)
	list(APPEND INCLUDE_DIRS ${SMB2_INCLUDEDIR})
	list(APPEND LINK_LIBRARIES ${SMB2_LINK_LIBRARIES})
	list(APPEND LDFLAGS ${SMB2_LDFLAGS})
	list(APPEND LIST_MODULE_NAME ${SMB2_MODULE_NAME})
	string(APPEND LIST_DEPS_SCRIPT "libsmb2")
else (NOT SMB2_FOUND)
	message(STATUS "libsmb2: trying alternate search method")
	find_package(SMB2 REQUIRED)
	if (SMB2_FOUND)
		list(APPEND INCLUDE_DIRS ${SMB2_INCLUDE_DIRS})
		list(APPEND LINK_LIBRARIES ${SMB2_LIBRARIES})
	else (NOT SMB2_FOUND)
		message(FATAL_ERROR "libsmb2: could not detect/find the required libraries, cannot continue!")
	endif ()
endif ()

# rdkafka
pkg_check_modules(RDKAFKA rdkafka>=2.2.0)

if (RDKAFKA_FOUND)
	list(APPEND INCLUDE_DIRS ${RDKAFKA_INCLUDEDIR})
	list(APPEND LINK_LIBRARIES ${RDKAFKA_LINK_LIBRARIES})
	list(APPEND LDFLAGS ${RDKAFKA_LDFLAGS})
	list(APPEND LIST_MODULE_NAME ${RDKAFKA_MODULE_NAME})
	string(APPEND LIST_DEPS_RPM " librdkafka1")
else (NOT RDKAFKA_FOUND)
	message(STATUS "librdkafka: trying alternate search method")
	find_package(RDKAFKA REQUIRED)
	if (RDKAFKA_FOUND)
		list(APPEND INCLUDE_DIRS ${RDKAFKA_INCLUDE_DIRS})
		list(APPEND LINK_LIBRARIES ${RDKAFKA_LIBRARIES})
	else (NOT RDKAFKA_FOUND)
		message(FATAL_ERROR "librdkafka: could not detect/find the required libraries, cannot continue!")
	endif ()
endif ()

# avro
pkg_check_modules(AVRO avro-c>=1.8.0)

if (AVRO_FOUND)
	list(APPEND INCLUDE_DIRS ${AVRO_INCLUDEDIR})
	list(APPEND LINK_LIBRARIES ${AVRO_LINK_LIBRARIES})
	list(APPEND LDFLAGS ${AVRO_LDFLAGS})
	list(APPEND LIST_MODULE_NAME ${AVRO_MODULE_NAME})
	string(APPEND LIST_DEPS_SCRIPT " avro-c")
else (NOT AVRO_FOUND)
	message(STATUS "avro-c: trying alternate search method")
	find_package(AVRO REQUIRED)
	if (AVRO_FOUND)
		list(APPEND INCLUDE_DIRS ${AVRO_INCLUDE_DIRS})
		list(APPEND LINK_LIBRARIES ${AVRO_LIBRARIES})
	else (NOT AVRO_FOUND)
		message(FATAL_ERROR "avro-c: could not detect/find the required libraries, cannot continue!")
	endif ()
endif ()

# libserdes
pkg_check_modules(SERDES serdes)

if (SERDES_FOUND)
	list(APPEND INCLUDE_DIRS ${SERDES_INCLUDEDIR})
	list(APPEND LINK_LIBRARIES ${SERDES_LINK_LIBRARIES})
	list(APPEND LDFLAGS ${SERDES_LDFLAGS})
	list(APPEND LIST_MODULE_NAME ${SERDES_MODULE_NAME})
	string(APPEND LIST_DEPS_SCRIPT " serdes")
else (NOT SERDES_FOUND)
	message(STATUS "libserdes: trying alternate search method")
	find_package(SERDES REQUIRED)
	if (SERDES_FOUND)
		list(APPEND INCLUDE_DIRS ${SERDES_INCLUDE_DIRS})
		list(APPEND LINK_LIBRARIES ${SERDES_LIBRARIES})
	else (NOT SERDES_FOUND)
		message(FATAL_ERROR "libserdes: could not detect/find the required libraries, cannot continue!")
	endif ()
endif ()

# scylla-cpp-driver
pkg_check_modules(SCYLLADB REQUIRED scylla-cpp-driver)

if (SCYLLADB_FOUND)
	list(APPEND INCLUDE_DIRS ${SCYLLADB_INCLUDEDIR})
	list(APPEND LINK_LIBRARIES ${SCYLLADB_LINK_LIBRARIES})
	list(APPEND LDFLAGS ${SCYLLADB_LDFLAGS})
	list(APPEND LIST_MODULE_NAME ${SCYLLADB_MODULE_NAME})
	string(APPEND LIST_DEPS_SCRIPT " scylla-cpp-driver")
endif()

# AWS CPP SDK
pkg_check_modules(AWSSDK aws-cpp-sdk-s3)

if (AWSSDK_FOUND)
	list(APPEND INCLUDE_DIRS ${AWSSDK_INCLUDEDIR})
	list(APPEND LINK_LIBRARIES ${AWSSDK_LINK_LIBRARIES})
	list(APPEND LDFLAGS ${AWSSDK_LDFLAGS})
	list(APPEND LIST_MODULE_NAME ${AWSSDK_MODULE_NAME})
	string(APPEND LIST_DEPS_SCRIPT " aws-cpp-sdk-s3")
else (NOT AWSSDK_FOUND)
	message(STATUS "aws-s3: trying alternate search method")
	find_package(AWSSDK REQUIRED COMPONENTS s3)
	if (AWSSDK_FOUND)
		list(APPEND INCLUDE_DIRS ${AWSSDK_INCLUDE_DIRS})
		list(APPEND LINK_LIBRARIES ${AWSSDK_LINK_LIBRARIES})
	else (NOT AWSSDK_FOUND)
		message(FATAL_ERROR "aws-s3: could not detect/find the required libraries, cannot continue!")
	endif ()
endif ()

# rabbitmq
pkg_check_modules(RABBITMQ REQUIRED librabbitmq>=0.11.0) 

if (RABBITMQ_FOUND)
	list(APPEND INCLUDE_DIRS ${RABBITMQ_INCLUDEDIR})
	list(APPEND LINK_LIBRARIES ${RABBITMQ_LINK_LIBRARIES})
	list(APPEND LDFLAGS ${RABBITMQ_LDFLAGS})
	string(APPEND LIST_DEPS_RPM " librabbitmq")
endif ()

# Java Native Interface
# find_package(JNI REQUIRED)
# if (JNI_FOUND)
# 	list(APPEND INCLUDE_DIRS ${JAVA_INCLUDE_PATH})
# 	list(APPEND LIST_MODULE_NAME ${JAVA_JVM_LIBRARY})
# endif()

# Boost (regex, iostreams, system)
set(BOOST_USE_STATIC_LIBS ON)
set(BOOST_USE_MULTITHREADED ON)
set(BOOST_USE_STATIC_RUNTIME OFF)

find_package(Boost REQUIRED COMPONENTS regex iostreams system thread filesystem) 

if (BOOST_FOUND)
		list(APPEND INCLUDE_DIRS ${Boost_INCLUDE_DIRS})
		list(APPEND LINK_LIBRARIES ${Boost_LIBRARIES})
		string(APPEND LIST_DEPS_RPM " boost-atomic boost-chrono boost-date-time boost-filesystem boost-iostreams boost-regex boost-system boost-thread")
else (NOT BOOST_FOUND)
		message(FATAL_ERROR "boost: could not detect/find the required libraries, cannot continue!")
endif ()

# oracle-oci
find_package(ORACLE REQUIRED)
if (ORACLE_FOUND)
	list(APPEND INCLUDE_DIRS ${ORACLE_INCLUDE_DIRS})
	list(APPEND LINK_LIBRARIES ${ORACLE_LIBRARIES})
	list(APPEND PKG_INCLUDE_DIRS "-I${ORACLE_INCLUDE_DIRS}")
else (NOT ORACLE_FOUND)
	message(FATAL_ERROR "oralce: could not detect/find the required oci libraries, cannot continue!")
endif ()

# HDFS
find_package(HDFS3 REQUIRED)
if (HDFS3_FOUND)
	list(APPEND INCLUDE_DIRS ${HDFS3_INCLUDE_DIR})
	list(APPEND LINK_LIBRARIES ${HDFS3_LIBRARY})
	list(APPEND PKG_INCLUDE_DIRS "-I${HDFS3_INCLUDE_DIR}")
else (NOT HDFS3_FOUND)
	message(FATAL_ERROR "libhdfs3: could not find required library, cannot continue!")
endif()

string (REPLACE ";" " " STR_INCLUDE_DIRS "${PKG_INCLUDE_DIRS}")
string (REPLACE ";" " " STR_LIBRARIES "${LIST_MODULE_NAME}")
string (REPLACE ";" " " STR_LDFLAGS "${LDFLAGS}")

removeDuplicateSubstring(${STR_INCLUDE_DIRS} STR_INCLUDE_DIRS)
removeDuplicateSubstring(${STR_LIBRARIES} STR_LIBRARIES)
removeDuplicateSubstring(${STR_LDFLAGS} STR_LDFLAGS)
removeDuplicateSubstring(${LIST_DEPS_RPM} LIST_DEPS_RPM)