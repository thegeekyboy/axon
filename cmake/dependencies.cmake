##############################################################################
## Finding the libraries and packages										 #
##############################################################################

# pkgconfig
find_package(PkgConfig REQUIRED)

# libcrypto
pkg_check_modules(CRYPT libcrypto>=3.0.0)

if (CRYPT_FOUND)
	list(APPEND INCLUDE_DIRS ${CRYPT_INCLUDE_DIRS})
	# list(APPEND LINK_LIBRARIES ${CRYPT_LINK_LIBRARIES})
	list(APPEND LDFLAGS ${CRYPT_LDFLAGS})
	list(APPEND LIST_LIBRARIES ${CRYPT_MODULE_NAME})
else (NOT CRYPT_FOUND)
	message(STATUS "libcrypto: trying alternate search method")
	find_package(Crypt REQUIRED)
	if (CRYPT_FOUND)
		list(APPEND INCLUDE_DIRS ${CRYPT_INCLUDE_DIRS})
		list(APPEND LINK_LIBRARIES ${CRYPT_LIBRARIES})
	else (NOT CRYPT_FOUND)
		message(FATAL_ERROR "libcrypto: could not detect/find any installed location, cannot continue")
	endif ()
endif ()

# file-magic
pkg_check_modules(LIBMAGIC libmagic)

if (LIBMAGIC_FOUND)
	list(APPEND INCLUDE_DIRS ${LIBMAGIC_INCLUDE_DIRS})
	# list(APPEND LINK_LIBRARIES ${LIBMAGIC_LINK_LIBRARIES})
	list(APPEND LDFLAGS ${LIBMAGIC_LDFLAGS})
	list(APPEND LIST_LIBRARIES ${LIBMAGIC_MODULE_NAME})
else (NOT LIBMAGIC_FOUND)
	message(STATUS "libmagic: trying alternate search method")
	find_package(LibMagic REQUIRED)
	if (LIBMAGIC_FOUND)
		list(APPEND INCLUDE_DIRS ${LIBMAGIC_INCLUDE_DIRS})
		list(APPEND LINK_LIBRARIES ${LIBMAGIC_LIBRARIES})
	else (NOT LIBMAGIC_FOUND)
		message(FATAL_ERROR "libmagic: could not detect/find any installed location, cannot continue")
	endif ()

endif ()

# OpenSSL

# find_package (OpenSSL REQUIRED)

# if (OPENSSL_FOUND)
# 	list(APPEND INCLUDE_DIRS ${OPENSSL_INCLUDE_DIRS})
# 	list(APPEND LIST_LIBRARIES ${OPENSSL_LIBRARIES})
# else (NOT OPENSSL_FOUND)
# 	message(FATAL_ERROR "OpenSSL Library missing!")
# endif ()

# GSSAPI
pkg_check_modules(GSSAPI krb5-gssapi>=1.20.0)

if (GSSAPI_FOUND)
	list(APPEND INCLUDE_DIRS ${GSSAPI_INCLUDE_DIRS})
	# list(APPEND LINK_LIBRARIES ${GSSAPI_LINK_LIBRARIES})
	list(APPEND LDFLAGS ${GSSAPI_LDFLAGS})
	list(APPEND LIST_LIBRARIES ${GSSAPI_MODULE_NAME})
else (NOT GSSAPI_FOUND)
	message(STATUS "krb5-gssapi: trying alternate search method")
	find_package (GSSAPI REQUIRED)
	if (GSSAPI_FOUND)
		list(APPEND INCLUDE_DIRS ${GSSAPI_INCLUDE_DIR})
		list(APPEND LINK_LIBRARIES ${GSSAPI_LIBRARIES})
	else (NOT GSSAPI_FOUND)
		message(FATAL_ERROR "krb5-gssapi: could not detect/find any installed location, cannot continue!")
	endif ()
endif ()

# libcurl
pkg_check_modules(CURL libcurl>=7.75.0)

if (CURL_FOUND)
	list(APPEND INCLUDE_DIRS ${CURL_INCLUDE_DIRS})
	# list(APPEND LINK_LIBRARIES ${CURL_LINK_LIBRARIES})
	list(APPEND LDFLAGS ${CURL_LDFLAGS})
	list(APPEND LIST_LIBRARIES ${CURL_MODULE_NAME})
else (NOT CURL_FOUND)
	message(STATUS "libcurl: trying alternate search method")
	find_package (CURL REQUIRED)
	if (CURL_FOUND)
		list(APPEND INCLUDE_DIRS ${CURL_INCLUDE_DIRS})
		list(APPEND LINK_LIBRARIES ${CURL_LIBRARIES})
	else (NOT CURL_FOUND)
		message(FATAL_ERROR "libcurl: could not detect/find any installed location, cannot continue!")
	endif ()
endif ()

# BZip2
pkg_check_modules(BZIP2 bzip2>=1.0.6)

if (BZIP2_FOUND)
	list(APPEND INCLUDE_DIRS ${BZIP2_INCLUDE_DIRS})
	# list(APPEND LINK_LIBRARIES ${BZIP2_LINK_LIBRARIES})
	list(APPEND LDFLAGS ${BZIP2_LDFLAGS})
	list(APPEND LIST_LIBRARIES ${BZIP2_MODULE_NAME})
else (NOT BZIP2_FOUND)
	message(STATUS "bzip2: trying alternate search method")
	find_package (BZip2 REQUIRED)
	if (BZIP2_FOUND)
		list(APPEND INCLUDE_DIRS ${BZIP2_INCLUDE_DIRS})
		list(APPEND LINK_LIBRARIES ${BZIP2_LIBRARIES})
	else (NOT BZIP2_FOUND)
		message(FATAL_ERROR "bzip2: could not detect/find any installed location, cannot continue!")
	endif ()
endif ()

# libzstd
pkg_check_modules(ZSTD libzstd>=1.5.1)

if (ZSTD_FOUND)
	list(APPEND INCLUDE_DIRS ${ZSTD_INCLUDE_DIRS})
	# list(APPEND LINK_LIBRARIES ${ZSTD_LINK_LIBRARIES})
	list(APPEND LDFLAGS ${ZSTD_LDFLAGS})
	list(APPEND LIST_LIBRARIES ${ZSTD_MODULE_NAME})
else (NOT ZSTD_FOUND)
	message(STATUS "libzstd: trying alternate search method")
	find_package (ZSTD REQUIRED)
	if (ZSTD_FOUND)
		list(APPEND INCLUDE_DIRS ${ZSTD_INCLUDE_DIRS})
		list(APPEND LINK_LIBRARIES ${ZSTD_LIBRARIES})
	else (NOT ZSTD_FOUND)
		message(FATAL_ERROR "libzstd: could not detect/find any installed location, cannot continue!")
	endif ()
endif ()

# SQLITE3
pkg_check_modules(SQLite3 sqlite3>=3.34.0)

if (SQLite3_FOUND)
	list(APPEND INCLUDE_DIRS ${SQLite3_INCLUDE_DIRS})
	# list(APPEND LINK_LIBRARIES ${SQLite3_LINK_LIBRARIES})
	list(APPEND LDFLAGS ${SQLite3_LDFLAGS})
	list(APPEND LIST_LIBRARIES ${SQLite3_MODULE_NAME})
else (NOT SQLite3_FOUND)
	message(STATUS "sqlite3: trying alternate search method")
	find_package(SQLite3 REQUIRED)
	if (SQLite3_FOUND)
		list(APPEND INCLUDE_DIRS ${SQLite3_INCLUDE_DIRS})
		list(APPEND LINK_LIBRARIES ${SQLite3_LIBRARIES})
	else (NOT SQLite3_FOUND)
		message(FATAL_ERROR "sqlite: could not detect/find the required libraries, cannot continue!")
	endif ()
endif ()

# libssh2
pkg_check_modules(SSH2 libssh2>=1.10.0)

if (SSH2_FOUND)
	list(APPEND INCLUDE_DIRS ${SSH2_INCLUDE_DIRS})
	# list(APPEND LINK_LIBRARIES ${SSH2_LINK_LIBRARIES})
	list(APPEND LDFLAGS ${SSH2_LDFLAGS})
	list(APPEND LIST_LIBRARIES ${SSH2_MODULE_NAME})
else (NOT LIBSSH2_FOUND)
	message(STATUS "libssh2: trying alternate search method")
	find_package(SSH2 REQUIRED)
	if (SSH2_FOUND)
		list(APPEND INCLUDE_DIRS ${SSH2_INCLUDE_DIRS})
		list(APPEND LINK_LIBRARIES ${SSH2_LIBRARIES})
	else (NOT SSH2_FOUND)
		message(FATAL_ERROR "libssh2: could not detect/find the required libraries, cannot continue!")
	endif ()
endif ()

# libconfig
pkg_check_modules(CONFIG libconfig>=1.7.2)

if (CONFIG_FOUND)
	list(APPEND INCLUDE_DIRS ${CONFIG_INCLUDE_DIRS})
	# list(APPEND LINK_LIBRARIES ${CONFIG_LINK_LIBRARIES})
	list(APPEND LDFLAGS ${CONFIG_LDFLAGS})
	list(APPEND LIST_LIBRARIES ${CONFIG_MODULE_NAME})
else (NOT CONFIG_FOUND)
	message(STATUS "linconfig: trying alternate search method")
	find_package(CONFIG REQUIRED)
	if (CONFIG_FOUND)
		list(APPEND INCLUDE_DIRS ${CONFIG_INCLUDE_DIRS})
		list(APPEND LINK_LIBRARIES ${CONFIG_LIBRARIES})
	else (NOT CONFIG_FOUND)
		message(FATAL_ERROR "libconfig: could not detect/find the required libraries, cannot continue!")
	endif ()
endif ()

# blkid
pkg_check_modules(BLKID blkid>=2.37.0)

if (BLKID_FOUND)
	list(APPEND INCLUDE_DIRS ${BLKID_INCLUDE_DIRS})
	# list(APPEND LINK_LIBRARIES ${BLKID_LINK_LIBRARIES})
	list(APPEND LDFLAGS ${BLKID_LDFLAGS})
	list(APPEND LIST_LIBRARIES ${BLKID_MODULE_NAME})
else (NOT BLKID_FOUND)
	message(STATUS "blkid: trying alternate search method")
	find_package(BLKID REQUIRED)
	if (BLKID_FOUND)
		list(APPEND INCLUDE_DIRS ${BLKID_INCLUDE_DIRS})
		list(APPEND LINK_LIBRARIES ${BLKID_LIBRARIES})
	else (NOT BLKID_FOUND)
		message(FATAL_ERROR "blkid: could not detect/find the required libraries, cannot continue!")
	endif ()
endif ()

# libsmb2
pkg_check_modules(SMB2 libsmb2>=4.0.0)

if (SMB2_FOUND)
	list(APPEND INCLUDE_DIRS ${SMB2_INCLUDE_DIRS})
	# list(APPEND LINK_LIBRARIES ${SMB2_LINK_LIBRARIES})
	list(APPEND LDFLAGS ${SMB2_LDFLAGS})
	list(APPEND LIST_LIBRARIES ${SMB2_MODULE_NAME})
else (NOT SMB2_FOUND)
	message(STATUS "libsmb2: trying alternate search method")
	find_package(SMB2 REQUIRED)
	if (SMB2_FOUND)
		list(APPEND INCLUDE_DIRS ${SMB2_INCLUDE_DIRS})
		list(APPEND LINK_LIBRARIES ${SMB2_LIBRARIES})
	else (NOT SMB2_FOUND)
		message(FATAL_ERROR "libsmb2: could not detect/find the required libraries, cannot continue!")
	endif ()
endif ()

# rdkafka
pkg_check_modules(RDKAFKA rdkafka>=2.2.0)

if (RDKAFKA_FOUND)
	list(APPEND INCLUDE_DIRS ${RDKAFKA_INCLUDE_DIRS})
	# list(APPEND LINK_LIBRARIES ${RDKAFKA_LINK_LIBRARIES})
	list(APPEND LDFLAGS ${RDKAFKA_LDFLAGS})
	list(APPEND LIST_LIBRARIES ${RDKAFKA_MODULE_NAME})
else (NOT RDKAFKA_FOUND)
	message(STATUS "librdkafka: trying alternate search method")
	find_package(RDKAFKA REQUIRED)
	if (RDKAFKA_FOUND)
		list(APPEND INCLUDE_DIRS ${RDKAFKA_INCLUDE_DIRS})
		list(APPEND LINK_LIBRARIES ${RDKAFKA_LIBRARIES})
	else (NOT RDKAFKA_FOUND)
		message(FATAL_ERROR "librdkafka: could not detect/find the required libraries, cannot continue!")
	endif ()
endif ()

# avro
pkg_check_modules(AVRO avro-c>=1.8.0)

if (AVRO_FOUND)
	list(APPEND INCLUDE_DIRS ${AVRO_INCLUDE_DIRS})
	# list(APPEND LINK_LIBRARIES ${AVRO_LINK_LIBRARIES})
	list(APPEND LDFLAGS ${AVRO_LDFLAGS})
	list(APPEND LIST_LIBRARIES ${AVRO_MODULE_NAME})
else (NOT AVRO_FOUND)
	message(STATUS "avro-c: trying alternate search method")
	find_package(AVRO REQUIRED)
	if (AVRO_FOUND)
		list(APPEND INCLUDE_DIRS ${AVRO_INCLUDE_DIRS})
		list(APPEND LINK_LIBRARIES ${AVRO_LIBRARIES})
	else (NOT AVRO_FOUND)
		message(FATAL_ERROR "avro-c: could not detect/find the required libraries, cannot continue!")
	endif ()
endif ()

# libserdes
pkg_check_modules(SERDES serdes)

if (SERDES_FOUND)
	list(APPEND INCLUDE_DIRS ${SERDES_INCLUDE_DIRS})
	# list(APPEND LINK_LIBRARIES ${SERDES_LINK_LIBRARIES})
	list(APPEND LDFLAGS ${SERDES_LDFLAGS})
	list(APPEND LIST_LIBRARIES ${SERDES_MODULE_NAME})
else (NOT SERDES_FOUND)
	message(STATUS "libserdes: trying alternate search method")
	find_package(SERDES REQUIRED)
	if (SERDES_FOUND)
		list(APPEND INCLUDE_DIRS ${SERDES_INCLUDE_DIRS})
		list(APPEND LINK_LIBRARIES ${SERDES_LIBRARIES})
	else (NOT SERDES_FOUND)
		message(FATAL_ERROR "libserdes: could not detect/find the required libraries, cannot continue!")
	endif ()
endif ()

# Kerberos 5
pkg_check_modules(KRB5 krb5)

if (KRB5_FOUND)
	list(APPEND INCLUDE_DIRS ${KRB5_INCLUDE_DIRS})
	# list(APPEND LINK_LIBRARIES ${KRB5_LINK_LIBRARIES})
	list(APPEND LDFLAGS ${KRB5_LDFLAGS})
	list(APPEND LIST_LIBRARIES ${KRB5_MODULE_NAME})
else (NOT KRB5_FOUND)
	message(STATUS "krb5: trying alternate search method")
	find_package(KRB5 REQUIRED gssapi)
	if (KRB5_FOUND)
		list(APPEND INCLUDE_DIRS ${KRB5_INCLUDE_DIRS})
		list(APPEND LINK_LIBRARIES ${KRB5_LIBRARIES})
	else (NOT KRB5_FOUND)
		message(FATAL_ERROR "krb5: could not detect/find the required libraries, cannot continue!")
	endif()
endif()

# AWS CPP SDK
pkg_check_modules(AWSSDK aws-cpp-sdk-s3)

if (AWSSDK_FOUND)
	list(APPEND INCLUDE_DIRS ${AWSSDK_INCLUDE_DIRS})
	# list(APPEND LINK_LIBRARIES ${AWSSDK_LINK_LIBRARIES})
	list(APPEND LDFLAGS ${AWSSDK_LDFLAGS})
	list(APPEND LIST_LIBRARIES ${AWSSDK_MODULE_NAME})
else (NOT AWSSDK_FOUND)
	message(STATUS "aws-s3: trying alternate search method")
	find_package(AWSSDK REQUIRED COMPONENTS s3)
	if (AWSSDK_FOUND)
		list(APPEND INCLUDE_DIRS ${AWSSDK_INCLUDE_DIRS})
		list(APPEND LINK_LIBRARIES ${AWSSDK_LINK_LIBRARIES})
	else (NOT AWSSDK_FOUND)
		message(FATAL_ERROR "aws-s3: could not detect/find the required libraries, cannot continue!")
	endif ()
endif ()

# Java Native Interface
#find_package(JNI REQUIRED)
#if (JNI_FOUND)
#	list(APPEND INCLUDE_DIRS ${JAVA_INCLUDE_PATH})
#	list(APPEND LIST_LIBRARIES ${JAVA_JVM_LIBRARY})
#endif()

# Boost (regex, iostreams, system)
set(BOOST_USE_STATIC_LIBS OFF)
set(BOOST_USE_MULTITHREADED ON)
set(BOOST_USE_STATIC_RUNTIME OFF)

find_package(Boost REQUIRED COMPONENTS regex iostreams system thread filesystem) 

if (BOOST_FOUND)
	list(APPEND INCLUDE_DIRS ${BOOST_INCLUDE_DIRS})
	list(APPEND LINK_LIBRARIES ${BOOST_LIBRARIES})
else (NOT BOOST_FOUND)
	message(FATAL_ERROR "boost: could not detect/find the required libraries, cannot continue!")
endif ()

# oracle-oci
find_package(ORACLE REQUIRED)
if (ORACLE_FOUND)
	list(APPEND INCLUDE_DIRS ${ORACLE_INCLUDE_DIRS})
	list(APPEND LINK_LIBRARIES ${ORACLE_LIBRARIES})
else (NOT ORACLE_FOUND)
	message(FATAL_ERROR "oralce: could not detect/find the required oci libraries, cannot continue!")
endif ()

# HDFS
find_package(HDFS3 REQUIRED)
if (HDFS3_FOUND)
	list(APPEND INCLUDE_DIRS ${HDFS3_INCLUDE_DIR})
	list(APPEND LINK_LIBRARIES ${HDFS3_LIBRARY})
else (NOT HDFS3_FOUND)
	message(FATAL_ERROR "LibHDFS Not Found!")
endif()

string (REPLACE ";" " " STR_LIBRARIES "${LIST_LIBRARIES}")
string (REPLACE ";" " " STR_LDFLAGS "${LDFLAGS}")
